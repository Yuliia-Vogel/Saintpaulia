// src/pages/admin/AdminUsersPage.jsx
import { Link } from "react-router-dom";
import React, { useState, useEffect } from "react";
import EditRoleModal from "../../components/admin/EditRoleModal";
import { getAllUsers, updateUserRole } from "../../services/api"; 
import { toast } from "sonner";

export default function AdminUsersPage() {
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [loading, setLoading] = useState(false);

    // üîß –ö—Ä–æ–∫ 1: –°—Ç–∞–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const [roleFilter, setRoleFilter] = useState({
    user: true,
    admin: true,
    superadmin: true,
  });

    // üîß –ö—Ä–æ–∫ 2: –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —á–µ–∫–±–æ–∫—Å—ñ–≤
  const handleRoleToggle = (role) => {
    setRoleFilter((prev) => ({
      ...prev,
      [role]: !prev[role],
    }));
  };

  const fetchUsers = async () => {
    try {
      const data = await getAllUsers();
      setUsers(data);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", error);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleOpenModal = (user) => {
    setSelectedUser(user);
  };

  const handleCloseModal = () => {
    setSelectedUser(null);
  };

  const handleSaveRole = async (newRole) => {
    if (!selectedUser) return;

    setLoading(true);
    try {
      await updateUserRole(selectedUser.id, newRole);
      toast.success(`–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${selectedUser.email} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${newRole}`);
      await fetchUsers(); // –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
    } catch (error) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
      console.error(error);
    } finally {
      setLoading(false);
      handleCloseModal();
    }
  };

  // üîç –ö—Ä–æ–∫ 3: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
  const filteredUsers = users.filter((user) => roleFilter[user.role]);


  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</h1>

      {/* üìã –ö—Ä–æ–∫ 2: UI –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ —Ä–æ–ª–µ–π */}
      <div className="mb-4 flex gap-4 items-center">
        <span className="font-semibold">–§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–æ–ª—è–º–∏:</span>
        {["user", "admin", "superadmin"].map((role) => (
          <label key={role} className="flex items-center gap-1">
            <input
              type="checkbox"
              checked={roleFilter[role]}
              onChange={() => handleRoleToggle(role)}
            />
            {role}
          </label>
        ))}
      </div>

      <table className="min-w-full border divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="text-left p-2">id</th>
            <th className="text-left p-2">Email</th>
            <th className="p-2 border">–°–æ—Ä—Ç–∏</th>
            <th className="text-left p-2">–†–æ–ª—å</th>
            <th className="text-left p-2">–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
           {filteredUsers.length === 0 ? (
            <tr>
              <td colSpan="5" className="text-center py-4 text-gray-500">
                –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ —Ä–æ–ª—è–º–∏
              </td>
            </tr>
          ) : (
            filteredUsers.map((user) => (
              <tr key={user.id} className="border-b">
                <td className="p-2">{user.id}</td>
                <td className="p-2">
                  <Link to={`/admin/users/${user.id}`} className="text-blue-600 underline hover:text-blue-800">
                    {user.email}
                  </Link>
                </td>
                <td className="p-2 border">
                  <Link
                    to={`/admin/users/${user.id}/varieties`}
                    className="text-blue-600 underline"
                  >
                    –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–æ—Ä—Ç–∏
                  </Link>
                </td>
                <td className="p-2">{user.role}</td>
                <td className="p-2">
                  <button
                    className="text-blue-600 hover:underline text-sm"
                    onClick={() => handleOpenModal(user)}
                  >
                    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä–æ–ª—å
                  </button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      <EditRoleModal
        user={selectedUser}
        onClose={handleCloseModal}
        onSave={handleSaveRole}
        loading={loading}
      />
    </div>
  );
}
          {/* {users.map((user) => (
            <tr key={user.id} className="border-b">
              <td className="p-2">{user.id}</td>
              <td className="p-2">
                <Link to={`/admin/users/${user.id}`} className="text-blue-600 underline hover:text-blue-800">
                  {user.email}
                </Link>
              </td>
              <td className="p-2 border">
                <Link
                  to={`/admin/users/${user.id}/varieties`}
                  className="text-blue-600 underline"
                >
                  –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–æ—Ä—Ç–∏
                </Link>
              </td>
              <td className="p-2">{user.role}</td>
              <td className="p-2">
                <button
                  className="text-blue-600 hover:underline text-sm"
                  onClick={() => handleOpenModal(user)}
                >
                  –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä–æ–ª—å
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <EditRoleModal
        user={selectedUser}
        onClose={handleCloseModal}
        
        onSave={handleSaveRole}
        loading={loading}
      />
    </div>
  );
} */}

