import { useEffect, useState } from "react";
import { fetchVarietiesNames, checkNameUnique } from "../services/fieldOptionsService";

export default function VarietyNameField({ value, onChange }) {
  console.log("üö® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç VarietyNameField –º–æ–Ω—Ç—É—î—Ç—å—Å—è –∞–±–æ –ø–µ—Ä–µ–º–æ–Ω—Ç–æ–≤—É—î—Ç—å—Å—è");

  const [varietyNames, setVarietyNames] = useState([]);
  const [inputValue, setInputValue] = useState(value || "");
  const [isUnique, setIsUnique] = useState(undefined);
  const [checking, setChecking] = useState(false);

  useEffect(() => {
    setInputValue(value || "");
  }, [value]);
  

  useEffect(() => {
    const loadVarieties = async () => {
      try {
        const res = await fetchVarietiesNames();
        setVarietyNames(res);  // –û—Å—å —Ç—É—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!
      } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–∑–≤–∏ —Å–æ—Ä—Ç—ñ–≤:", error);
      }
    };
    loadVarieties();
  }, []);

  useEffect(() => {
    const trimmed = inputValue.trim();
    if (!trimmed) {
      setIsUnique(undefined);
      return;
    }

    const timer = setTimeout(async () => {
      try {
        setChecking(true);
        const res = await checkNameUnique(trimmed);
        console.log("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", res);
        setIsUnique(res.is_unique);
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ:", error);
        setIsUnique(undefined);
      } finally {
        setChecking(false);
      }
    }, 500);

    return () => clearTimeout(timer);
  }, [inputValue]);


  const handleInputChange = (e) => {
    const val = e.target.value;
    setInputValue(val);
    console.log("ü™Ñ –ü—Ä–∏–π—à–æ–≤ –ø—Ä–æ–ø value —É VarietyNameField:", value);
    onChange({ target: { name: "name", value: val } });
  };

  console.log("üîÑ –†–µ–Ω–¥–µ—Ä VarietyNameField:", { inputValue, isUnique, checking });
  console.log("üßê –£–º–æ–≤–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", {
    trimmedInput: inputValue.trim(),
    checking,
    isUnique,
  });

  return (
    <div>
      <input
        type="text"
        list="variety-names"
        name="name"
        value={inputValue}
        onChange={handleInputChange}
        placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–æ—Ä—Ç—É"
        className="w-full border px-3 py-2 rounded-xl text-sm"
      />
      <datalist id="variety-names">
        {Array.isArray(varietyNames) &&
          varietyNames.map((name) => (
            <option key={name} value={name} />
          ))}
      </datalist>

      {inputValue.trim() && !checking && isUnique === true && (
        <p className="text-green-600 mt-1 text-sm">–ù–∞–∑–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</p>
      )}
      {inputValue.trim() && !checking && isUnique === false && (
        <p className="text-red-600 mt-1 text-sm">–°–æ—Ä—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î</p>
      )}
      {checking && <p className="text-gray-500 mt-1 text-sm">–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–∑–≤–∏...</p>}
    </div>
  );
}
