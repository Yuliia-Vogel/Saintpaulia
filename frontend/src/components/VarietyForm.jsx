import { useEffect, useState, useCallback } from "react";
import { fetchFieldOptions } from "../services/fieldOptionsService";
import VarietyNameField from "./VarietyNameField";

export function VarietyForm({ initialData = {}, onSubmit, isSaving = false }) {
  console.log("ü™Ñ render VarietyForm, initialData:", initialData);
 
  const [formData, setFormData] = useState({
    name: initialData.name || '',
    description: initialData.description || '',
    size_category: initialData.size_category || '',
    growth_type: initialData.growth_type || '',

    main_flower_color: initialData.main_flower_color || '',
    flower_color_type: initialData.flower_color_type || '',
    flower_edge_color: initialData.flower_edge_color || '',
    ruffles: initialData.ruffles || '',
    ruffles_color: initialData.ruffles_color || '',
    flower_colors_all: initialData.flower_colors_all || '', 
    flower_size: initialData.flower_size || '',
    flower_shape: initialData.flower_shape || '',
    petals_shape: initialData.petals_shape || '',
    flower_doubleness: initialData.flower_doubleness || '',
    blooming_features: initialData.blooming_features || '',
    
    leaf_shape: initialData.leaf_shape || '',
    leaf_variegation: initialData.leaf_variegation || '',
    leaf_color_type: initialData.leaf_color_type || '',
    leaf_features: initialData.leaf_features || '',

    origin: initialData.origin || '',
    breeder: initialData.breeder || '',
    breeder_origin_country: initialData.breeder_origin_country || '',
    selection_year: initialData.selection_year || '',
    data_source: initialData.data_source || '', 
    
    owner_id: initialData.owner_id || '',
    record_creation_date: initialData.record_creation_date || '',
    verification_status: initialData.verification_status || false,
    verified_by: initialData.verified_by || '',
  });

  const [formErrors, setFormErrors] = useState({});
  const [fieldOptions, setFieldOptions] = useState({});
  const [customFields, setCustomFields] = useState({});

  useEffect(() => {
    const loadFieldOptions = async () => {
      try {
        const options = await fetchFieldOptions();
        console.log("‚úÖ –û–ø—Ü—ñ—ó, —è–∫—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ –∑ —Å–µ—Ä–≤—ñ—Å—É:", options);
        setFieldOptions(options);
      } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–ø—Ü—ñ—ó –¥–ª—è –ø–æ–ª—ñ–≤:", error);
      }
    };

    loadFieldOptions();
  }, []);

  const handleNameChange = useCallback((e) => {
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  }, []);

  const handleChange = useCallback((e) => {
    const { name, value } = e.target;

    if (value === "__custom__") {
      setCustomFields((prev) => ({ ...prev, [name]: "" }));
      setFormData((prev) => ({ ...prev, [name]: "" }));
    } else {
      setCustomFields((prev) => {
        const newCustom = { ...prev };
        delete newCustom[name];
        return newCustom;
      });
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
    
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á–∏—Å—Ç–∏–≤ –ø–æ–ª–µ 'ruffles', —Ç–∞–∫–æ–∂ –æ—á–∏—â—É—î–º–æ 'ruffles_color'
    if (name === 'ruffles' && !value) {
      setFormData(prev => ({ ...prev, ruffles_color: '' }));
    }

  }, []);

  const handleCustomChange = useCallback((e) => {
    const { name, value } = e.target;
    setCustomFields((prev) => ({ ...prev, [name]: value }));
    setFormData((prev) => ({ ...prev, [name]: value }));
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();

   // –ü–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –æ—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ
    const cleanedData = Object.fromEntries(
        Object.entries(formData).filter(([, value]) => value !== null && value !== '')
    );
    
    onSubmit(cleanedData);
  };

  const renderField = (field, label) => {
    if (field === "name") {
      return <VarietyNameField value={formData.name} onChange={handleNameChange} />;
    }

    const dynamicOpts = fieldOptions[field];
    // --- –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –í–°–Ü–• –í–ò–ü–ê–î–ê–Æ–ß–ò–• –°–ü–ò–°–ö–Ü–í ---
    // (–≤–∫–ª—é—á–∞—é—á–∏ `ruffles` —Ç–∞ `ruffles_color`)
    if (dynamicOpts) { 
      const options = [...dynamicOpts].filter((v, i, a) => a.indexOf(v) === i && v !== "").sort();
      const isDisabled = field === 'ruffles_color' && !formData.ruffles;
      return (
        <>
          <select
            name={field}
            value={options.includes(String(formData[field])) ? formData[field] : (customFields[field] !== undefined ? "__custom__" : "")}
            onChange={handleChange}
            disabled={isDisabled}
            className={`w-full border px-3 py-2 rounded-xl text-sm ${isDisabled ? 'bg-gray-100' : ''}`}
          >
            <option value="">-</option>
            {options.map((opt) => (
              <option key={opt} value={opt}>
                {opt}
              </option>
            ))}
            <option value="__custom__">–Ü–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç...</option>
          </select>

          {customFields[field] !== undefined && (
            <input
              type="text"
              name={field}
              value={customFields[field]}
              onChange={handleCustomChange}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è"
              disabled={isDisabled}
              className="mt-2 w-full border px-3 py-2 rounded-xl text-sm"
            />
          )}
        </>
      );
    }

    // 3. –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø–æ–ª—è —Ä–æ–∫—É
    if (field === "selection_year") {
      return (
        <input
          type="number"
          name={field}
          value={formData[field]}
          onChange={handleChange}
          min="1800"
          max={new Date().getFullYear()}
          placeholder="–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ —Å–µ–ª–µ–∫—Ü—ñ—ó"
          className="w-full border px-3 py-2 rounded-xl text-sm"
        />
      );
    }

    // 4. –õ–æ–≥—ñ–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤ (–∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥)
    const isReadOnlyField = field === "owner_id" || field === "record_creation_date";
    return (
      <input
        type="text"
        name={field}
        value={formData[field]}
        onChange={handleChange}
        disabled={isReadOnlyField}
        className={`w-full border px-3 py-2 rounded-xl text-sm ${
          isReadOnlyField ? "bg-gray-100 text-gray-500 cursor-not-allowed" : ""
        }`}
      />
    );
  };
  const fields = [
    ["name", "–ù–∞–∑–≤–∞ —Å–æ—Ä—Ç—É"],
    ["description", "–û–ø–∏—Å"],
    ["size_category", "–†–æ–∑–º—ñ—Ä —Ä–æ–∑–µ—Ç–∫–∏"],
    ["growth_type" , "–¢–∏–ø —Ä–æ—Å—Ç—É"],

    ["main_flower_color", "–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä –∫–≤—ñ—Ç–∫–∏"],
    ["flower_color_type", "–¢–∏–ø –æ–∫—Ä–∞—Å—É –∫–≤—ñ—Ç–∫–∏"],
    ["flower_edge_color", "–û–±–ª—è–º—ñ–≤–∫–∞ –∫–≤—ñ—Ç–∫–∏"],
    ["ruffles", "–†—é—à—ñ"],
    ["ruffles_color", "–ö–æ–ª—ñ—Ä —Ä—é—à"],
    ["flower_colors_all", "–í—Å—ñ –∫–æ–ª—å–æ—Ä–∏ –∫–≤—ñ—Ç–∫–∏"],
    ["petals_shape", "–§–æ—Ä–º–∞ –ø–µ–ª—é—Å—Ç–æ–∫"],
    ["flower_size", "–†–æ–∑–º—ñ—Ä –∫–≤—ñ—Ç—ñ–≤"],
    ["flower_shape", "–§–æ—Ä–º–∞ –∫–≤—ñ—Ç—ñ–≤"],
    ["flower_doubleness", "–ù–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å –∫–≤—ñ—Ç—ñ–≤"],
    ["blooming_features", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–≤—ñ—Ç—ñ–Ω–Ω—è"],

    ["leaf_shape", "–§–æ—Ä–º–∞ –ª–∏—Å—Ç–∫—ñ–≤"],
    ["leaf_variegation", "–°—Ç—Ä–æ–∫–∞—Ç—ñ—Å—Ç—å –ª–∏—Å—Ç—è"],
    ["leaf_color_type", "–¢–∏–ø –æ–∫—Ä–∞—Å—É –ª–∏—Å—Ç–∫–∞"],
    ["leaf_features", "–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –ª–∏—Å—Ç—è"],

    ["origin", "–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Å–æ—Ä—Ç—É"],

    ["breeder", "–°–µ–ª–µ–∫—Ü—ñ–æ–Ω–µ—Ä"],
    ["breeder_origin_country", "-"],
    ["selection_year", "–†—ñ–∫ —Å–µ–ª–µ–∫—Ü—ñ—ó"],
    
    ["data_source", "–î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö"],
    ["owner_id", "–ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å—É"],
    ["record_creation_date", "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É"],
  ];

  if (Object.keys(fieldOptions).length === 0) {
    return <p className="text-center p-4">‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏...</p>;
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-4 max-w-xl mx-auto p-4 border rounded-2xl shadow bg-white"
    >
      {fields.map(([field, label]) => (
        <div key={field}>
          <label htmlFor={field} className="block text-sm font-medium text-gray-700 mb-1">
            {label}
          </label>
          {renderField(field, label)}
        </div>
      ))}

      <button
        type="submit"
        disabled={isSaving}
        className="bg-violet-600 text-white px-4 py-2 rounded-xl hover:bg-violet-700 transition"
      >
        {isSaving ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–±–µ—Ä–µ–≥—Ç–∏"}
      </button>
    </form>
  );
}
